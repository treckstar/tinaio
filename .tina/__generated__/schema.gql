# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  doc(relativePath: String): Doc!
  docConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: DocFilter): DocConnection!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  abtest(relativePath: String): Abtest!
  abtestConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AbtestFilter): AbtestConnection!
}

input DocumentFilter {
  page: PageFilter
  doc: DocFilter
  post: PostFilter
  abtest: AbtestFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter): DocumentConnection!
}

union DocumentNode = Page | Doc | Post | Abtest

type PageSeo {
  title: String
  description: String
}

type PageBlocksHeroActions {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

type PageBlocksHero {
  headline: String
  text: String
  actions: [PageBlocksHeroActions]
  videoSrc: String
}

type PageBlocksFeaturesItemsFeatureMedia {
  src: String
  videoSrc: String
  cli: Boolean
}

type PageBlocksFeaturesItemsFeatureActions {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

type PageBlocksFeaturesItemsFeature {
  headline: String
  text: String
  media: PageBlocksFeaturesItemsFeatureMedia
  actions: [PageBlocksFeaturesItemsFeatureActions]
}

union PageBlocksFeaturesItems = PageBlocksFeaturesItemsFeature

type PageBlocksFeatures {
  items: [PageBlocksFeaturesItems]
}

type PageBlocksFlyingActions {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

type PageBlocksFlying {
  headline: String
  text: String
  actions: [PageBlocksFlyingActions]
}

type PageBlocksPricingBaseActions {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

type PageBlocksPricingBase {
  name: String
  price: String
  interval: String
  body: JSON
  actions: [PageBlocksPricingBaseActions]
}

type PageBlocksPricingPlansActions {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

type PageBlocksPricingPlans {
  name: String
  price: String
  interval: String
  body: JSON
  actions: [PageBlocksPricingPlansActions]
}

type PageBlocksPricing {
  intro: JSON
  base: PageBlocksPricingBase
  plans: [PageBlocksPricingPlans]
}

type PageBlocksFaqQuestions {
  question: String
  answer: JSON
}

type PageBlocksFaq {
  title: String
  intro: JSON
  questions: [PageBlocksFaqQuestions]
  color: String
}

type PageBlocksContentOptions {
  narrow: Boolean
  color: String
  align: String
}

type PageBlocksContent {
  options: PageBlocksContentOptions
  content: JSON
}

type PageBlocksShowcaseItemsMedia {
  src: String
}

type PageBlocksShowcaseItems {
  headline: String
  text: String
  url: String
  media: PageBlocksShowcaseItemsMedia
}

type PageBlocksShowcase {
  items: [PageBlocksShowcaseItems]
}

type PageBlocksColumnsOptions {
  columns: String
  narrow: Boolean
  color: String
  align: String
}

type PageBlocksColumns {
  options: PageBlocksColumnsOptions
  columnOne: JSON
  columnTwo: JSON
}

type PageBlocksStory {
  title: String
}

type PageBlocksFeatureGridItemsActions {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

type PageBlocksFeatureGridItems {
  headline: String
  text: String
  actions: [PageBlocksFeatureGridItemsActions]
}

type PageBlocksFeatureGrid {
  items: [PageBlocksFeatureGridItems]
}

type PageBlocksLogoGridItems {
  name: String
  logo: String
  size: Float
}

type PageBlocksLogoGrid {
  title: String
  link: String
  items: [PageBlocksLogoGridItems]
}

type PageBlocksRoadmapGridItemsActions {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

type PageBlocksRoadmapGridItems {
  headline: String
  status: String
  content: JSON
  actions: [PageBlocksRoadmapGridItemsActions]
}

type PageBlocksRoadmapGridOptions {
  paddingTop: Boolean
  paddingBottom: Boolean
}

type PageBlocksRoadmapGrid {
  headline: String
  items: [PageBlocksRoadmapGridItems]
  options: PageBlocksRoadmapGridOptions
}

type PageBlocksRecentPosts {
  title: String
}

union PageBlocks = PageBlocksHero | PageBlocksFeatures | PageBlocksFlying | PageBlocksPricing | PageBlocksFaq | PageBlocksContent | PageBlocksShowcase | PageBlocksColumns | PageBlocksStory | PageBlocksFeatureGrid | PageBlocksLogoGrid | PageBlocksRoadmapGrid | PageBlocksRecentPosts

type Page implements Node & Document {
  seo: PageSeo
  blocks: [PageBlocks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PageSeoFilter {
  title: StringFilter
  description: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input PageBlocksHeroActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksHeroFilter {
  headline: StringFilter
  text: StringFilter
  actions: PageBlocksHeroActionsFilter
  videoSrc: StringFilter
}

input PageBlocksFeaturesItemsFeatureMediaFilter {
  src: StringFilter
  videoSrc: StringFilter
  cli: BooleanFilter
}

input PageBlocksFeaturesItemsFeatureActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksFeaturesItemsFeatureFilter {
  headline: StringFilter
  text: StringFilter
  media: PageBlocksFeaturesItemsFeatureMediaFilter
  actions: PageBlocksFeaturesItemsFeatureActionsFilter
}

input PageBlocksFeaturesItemsFilter {
  feature: PageBlocksFeaturesItemsFeatureFilter
}

input PageBlocksFeaturesFilter {
  items: PageBlocksFeaturesItemsFilter
}

input PageBlocksFlyingActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksFlyingFilter {
  headline: StringFilter
  text: StringFilter
  actions: PageBlocksFlyingActionsFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PageBlocksPricingBaseActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksPricingBaseFilter {
  name: StringFilter
  price: StringFilter
  interval: StringFilter
  body: RichTextFilter
  actions: PageBlocksPricingBaseActionsFilter
}

input PageBlocksPricingPlansActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksPricingPlansFilter {
  name: StringFilter
  price: StringFilter
  interval: StringFilter
  body: RichTextFilter
  actions: PageBlocksPricingPlansActionsFilter
}

input PageBlocksPricingFilter {
  intro: RichTextFilter
  base: PageBlocksPricingBaseFilter
  plans: PageBlocksPricingPlansFilter
}

input PageBlocksFaqQuestionsFilter {
  question: StringFilter
  answer: RichTextFilter
}

input PageBlocksFaqFilter {
  title: StringFilter
  intro: RichTextFilter
  questions: PageBlocksFaqQuestionsFilter
  color: StringFilter
}

input PageBlocksContentOptionsFilter {
  narrow: BooleanFilter
  color: StringFilter
  align: StringFilter
}

input PageBlocksContentContentActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksContentContentSocialFilter {
  tina: StringFilter
  discord: StringFilter
  github: StringFilter
  twitter: StringFilter
}

input PageBlocksContentContentNewsletterFilter {
  style: StringFilter
}

input PageBlocksContentContentFilter {
  actions: PageBlocksContentContentActionsFilter
  social: PageBlocksContentContentSocialFilter
  newsletter: PageBlocksContentContentNewsletterFilter
}

input PageBlocksContentFilter {
  options: PageBlocksContentOptionsFilter
  content: PageBlocksContentContentFilter
}

input PageBlocksShowcaseItemsMediaFilter {
  src: StringFilter
}

input PageBlocksShowcaseItemsFilter {
  headline: StringFilter
  text: StringFilter
  url: StringFilter
  media: PageBlocksShowcaseItemsMediaFilter
}

input PageBlocksShowcaseFilter {
  items: PageBlocksShowcaseItemsFilter
}

input PageBlocksColumnsOptionsFilter {
  columns: StringFilter
  narrow: BooleanFilter
  color: StringFilter
  align: StringFilter
}

input PageBlocksColumnsColumnOneActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksColumnsColumnOneSocialFilter {
  tina: StringFilter
  discord: StringFilter
  github: StringFilter
  twitter: StringFilter
}

input PageBlocksColumnsColumnOneNewsletterFilter {
  style: StringFilter
}

input PageBlocksColumnsColumnOneFilter {
  actions: PageBlocksColumnsColumnOneActionsFilter
  social: PageBlocksColumnsColumnOneSocialFilter
  newsletter: PageBlocksColumnsColumnOneNewsletterFilter
}

input PageBlocksColumnsColumnTwoActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksColumnsColumnTwoSocialFilter {
  tina: StringFilter
  discord: StringFilter
  github: StringFilter
  twitter: StringFilter
}

input PageBlocksColumnsColumnTwoNewsletterFilter {
  style: StringFilter
}

input PageBlocksColumnsColumnTwoFilter {
  actions: PageBlocksColumnsColumnTwoActionsFilter
  social: PageBlocksColumnsColumnTwoSocialFilter
  newsletter: PageBlocksColumnsColumnTwoNewsletterFilter
}

input PageBlocksColumnsFilter {
  options: PageBlocksColumnsOptionsFilter
  columnOne: PageBlocksColumnsColumnOneFilter
  columnTwo: PageBlocksColumnsColumnTwoFilter
}

input PageBlocksStoryFilter {
  title: StringFilter
}

input PageBlocksFeatureGridItemsActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksFeatureGridItemsFilter {
  headline: StringFilter
  text: StringFilter
  actions: PageBlocksFeatureGridItemsActionsFilter
}

input PageBlocksFeatureGridFilter {
  items: PageBlocksFeatureGridItemsFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input PageBlocksLogoGridItemsFilter {
  name: StringFilter
  logo: StringFilter
  size: NumberFilter
}

input PageBlocksLogoGridFilter {
  title: StringFilter
  link: StringFilter
  items: PageBlocksLogoGridItemsFilter
}

input PageBlocksRoadmapGridItemsActionsFilter {
  label: StringFilter
  icon: BooleanFilter
  variant: StringFilter
  size: StringFilter
  url: StringFilter
}

input PageBlocksRoadmapGridItemsFilter {
  headline: StringFilter
  status: StringFilter
  content: RichTextFilter
  actions: PageBlocksRoadmapGridItemsActionsFilter
}

input PageBlocksRoadmapGridOptionsFilter {
  paddingTop: BooleanFilter
  paddingBottom: BooleanFilter
}

input PageBlocksRoadmapGridFilter {
  headline: StringFilter
  items: PageBlocksRoadmapGridItemsFilter
  options: PageBlocksRoadmapGridOptionsFilter
}

input PageBlocksRecentPostsFilter {
  title: StringFilter
}

input PageBlocksFilter {
  hero: PageBlocksHeroFilter
  features: PageBlocksFeaturesFilter
  flying: PageBlocksFlyingFilter
  pricing: PageBlocksPricingFilter
  faq: PageBlocksFaqFilter
  content: PageBlocksContentFilter
  showcase: PageBlocksShowcaseFilter
  columns: PageBlocksColumnsFilter
  story: PageBlocksStoryFilter
  featureGrid: PageBlocksFeatureGridFilter
  logoGrid: PageBlocksLogoGridFilter
  roadmapGrid: PageBlocksRoadmapGridFilter
  recentPosts: PageBlocksRecentPostsFilter
}

input PageFilter {
  seo: PageSeoFilter
  blocks: PageBlocksFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type Doc implements Node & Document {
  title: String
  last_edited: String
  prev: String
  next: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input DocFilter {
  title: StringFilter
  last_edited: DatetimeFilter
  prev: StringFilter
  next: StringFilter
  body: RichTextFilter
}

type DocConnectionEdges {
  cursor: String!
  node: Doc
}

type DocConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocConnectionEdges]
}

union PostPrev = Post

union PostNext = Post

type Post implements Node & Document {
  title: String!
  date: String
  last_edited: String
  author: String
  prev: PostPrev
  next: PostNext
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PostPrevFilter {
  post: PostFilter
}

input PostNextFilter {
  post: PostFilter
}

input PostBodyYoutubeFilter {
  embedSrc: StringFilter
}

input PostBodyIframeFilter {
  iframeSrc: StringFilter
  height: NumberFilter
}

input PostBodyCreateAppCtaFilter {
  ctaText: StringFilter
  cliText: StringFilter
}

input PostBodyCalloutFilter {
  title: StringFilter
  description: StringFilter
  url: StringFilter
  buttonText: StringFilter
}

input PostBodyCodesandboxFilter {
  embedSrc: StringFilter
  title: StringFilter
}

input PostBodyDiagramFilter {
  src: StringFilter
  alt: StringFilter
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input PostBodyWideImageFilter {
  src: ImageFilter
  alt: StringFilter
}

input PostBodyCustomFieldComponentDemoFilter {
  test: StringFilter
}

input PostBodyFilter {
  Youtube: PostBodyYoutubeFilter
  Iframe: PostBodyIframeFilter
  CreateAppCta: PostBodyCreateAppCtaFilter
  Callout: PostBodyCalloutFilter
  Codesandbox: PostBodyCodesandboxFilter
  Diagram: PostBodyDiagramFilter
  WideImage: PostBodyWideImageFilter
  CustomFieldComponentDemo: PostBodyCustomFieldComponentDemoFilter
}

input PostFilter {
  title: StringFilter
  date: DatetimeFilter
  last_edited: DatetimeFilter
  author: StringFilter
  prev: PostPrevFilter
  next: PostNextFilter
  body: PostBodyFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type AbtestTestsVariants {
  testId: String
  href: String
}

type AbtestTests {
  testId: String
  href: String
  variants: [AbtestTestsVariants]
}

type Abtest implements Node & Document {
  tests: [AbtestTests]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AbtestTestsVariantsFilter {
  testId: StringFilter
  href: StringFilter
}

input AbtestTestsFilter {
  testId: StringFilter
  href: StringFilter
  variants: AbtestTestsVariantsFilter
}

input AbtestFilter {
  tests: AbtestTestsFilter
}

type AbtestConnectionEdges {
  cursor: String!
  node: Abtest
}

type AbtestConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AbtestConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateDoc(relativePath: String!, params: DocMutation!): Doc!
  createDoc(relativePath: String!, params: DocMutation!): Doc!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updateAbtest(relativePath: String!, params: AbtestMutation!): Abtest!
  createAbtest(relativePath: String!, params: AbtestMutation!): Abtest!
}

input DocumentUpdateMutation {
  page: PageMutation
  doc: DocMutation
  post: PostMutation
  abtest: AbtestMutation
  relativePath: String
}

input DocumentMutation {
  page: PageMutation
  doc: DocMutation
  post: PostMutation
  abtest: AbtestMutation
}

input PageSeoMutation {
  title: String
  description: String
}

input PageBlocksHeroActionsMutation {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

input PageBlocksHeroMutation {
  headline: String
  text: String
  actions: [PageBlocksHeroActionsMutation]
  videoSrc: String
}

input PageBlocksFeaturesItemsFeatureMediaMutation {
  src: String
  videoSrc: String
  cli: Boolean
}

input PageBlocksFeaturesItemsFeatureActionsMutation {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

input PageBlocksFeaturesItemsFeatureMutation {
  headline: String
  text: String
  media: PageBlocksFeaturesItemsFeatureMediaMutation
  actions: [PageBlocksFeaturesItemsFeatureActionsMutation]
}

input PageBlocksFeaturesItemsMutation {
  feature: PageBlocksFeaturesItemsFeatureMutation
}

input PageBlocksFeaturesMutation {
  items: [PageBlocksFeaturesItemsMutation]
}

input PageBlocksFlyingActionsMutation {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

input PageBlocksFlyingMutation {
  headline: String
  text: String
  actions: [PageBlocksFlyingActionsMutation]
}

input PageBlocksPricingBaseActionsMutation {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

input PageBlocksPricingBaseMutation {
  name: String
  price: String
  interval: String
  body: JSON
  actions: [PageBlocksPricingBaseActionsMutation]
}

input PageBlocksPricingPlansActionsMutation {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

input PageBlocksPricingPlansMutation {
  name: String
  price: String
  interval: String
  body: JSON
  actions: [PageBlocksPricingPlansActionsMutation]
}

input PageBlocksPricingMutation {
  intro: JSON
  base: PageBlocksPricingBaseMutation
  plans: [PageBlocksPricingPlansMutation]
}

input PageBlocksFaqQuestionsMutation {
  question: String
  answer: JSON
}

input PageBlocksFaqMutation {
  title: String
  intro: JSON
  questions: [PageBlocksFaqQuestionsMutation]
  color: String
}

input PageBlocksContentOptionsMutation {
  narrow: Boolean
  color: String
  align: String
}

input PageBlocksContentMutation {
  options: PageBlocksContentOptionsMutation
  content: JSON
}

input PageBlocksShowcaseItemsMediaMutation {
  src: String
}

input PageBlocksShowcaseItemsMutation {
  headline: String
  text: String
  url: String
  media: PageBlocksShowcaseItemsMediaMutation
}

input PageBlocksShowcaseMutation {
  items: [PageBlocksShowcaseItemsMutation]
}

input PageBlocksColumnsOptionsMutation {
  columns: String
  narrow: Boolean
  color: String
  align: String
}

input PageBlocksColumnsMutation {
  options: PageBlocksColumnsOptionsMutation
  columnOne: JSON
  columnTwo: JSON
}

input PageBlocksStoryMutation {
  title: String
}

input PageBlocksFeatureGridItemsActionsMutation {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

input PageBlocksFeatureGridItemsMutation {
  headline: String
  text: String
  actions: [PageBlocksFeatureGridItemsActionsMutation]
}

input PageBlocksFeatureGridMutation {
  items: [PageBlocksFeatureGridItemsMutation]
}

input PageBlocksLogoGridItemsMutation {
  name: String
  logo: String
  size: Float
}

input PageBlocksLogoGridMutation {
  title: String
  link: String
  items: [PageBlocksLogoGridItemsMutation]
}

input PageBlocksRoadmapGridItemsActionsMutation {
  label: String
  icon: Boolean
  variant: String
  size: String
  url: String
}

input PageBlocksRoadmapGridItemsMutation {
  headline: String
  status: String
  content: JSON
  actions: [PageBlocksRoadmapGridItemsActionsMutation]
}

input PageBlocksRoadmapGridOptionsMutation {
  paddingTop: Boolean
  paddingBottom: Boolean
}

input PageBlocksRoadmapGridMutation {
  headline: String
  items: [PageBlocksRoadmapGridItemsMutation]
  options: PageBlocksRoadmapGridOptionsMutation
}

input PageBlocksRecentPostsMutation {
  title: String
}

input PageBlocksMutation {
  hero: PageBlocksHeroMutation
  features: PageBlocksFeaturesMutation
  flying: PageBlocksFlyingMutation
  pricing: PageBlocksPricingMutation
  faq: PageBlocksFaqMutation
  content: PageBlocksContentMutation
  showcase: PageBlocksShowcaseMutation
  columns: PageBlocksColumnsMutation
  story: PageBlocksStoryMutation
  featureGrid: PageBlocksFeatureGridMutation
  logoGrid: PageBlocksLogoGridMutation
  roadmapGrid: PageBlocksRoadmapGridMutation
  recentPosts: PageBlocksRecentPostsMutation
}

input PageMutation {
  seo: PageSeoMutation
  blocks: [PageBlocksMutation]
}

input DocMutation {
  title: String
  last_edited: String
  prev: String
  next: String
  body: JSON
}

input PostMutation {
  title: String
  date: String
  last_edited: String
  author: String
  prev: String
  next: String
  body: JSON
}

input AbtestTestsVariantsMutation {
  testId: String
  href: String
}

input AbtestTestsMutation {
  testId: String
  href: String
  variants: [AbtestTestsVariantsMutation]
}

input AbtestMutation {
  tests: [AbtestTestsMutation]
}

schema {
  query: Query
  mutation: Mutation
}
  